// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.9.0
// source: usercenter.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password     string      `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Captcha      *CaptchaReq `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	Phone        string      `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Promotion    string      `protobuf:"bytes,5,opt,name=promotion,proto3" json:"promotion,omitempty"`
	Code         string      `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Country      string      `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	SuperPartner string      `protobuf:"bytes,8,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	Ip           string      `protobuf:"bytes,9,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *RegisterReq) Reset() {
	*x = RegisterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReq) ProtoMessage() {}

func (x *RegisterReq) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReq.ProtoReflect.Descriptor instead.
func (*RegisterReq) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RegisterReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RegisterReq) GetCaptcha() *CaptchaReq {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *RegisterReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterReq) GetPromotion() string {
	if x != nil {
		return x.Promotion
	}
	return ""
}

func (x *RegisterReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RegisterReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *RegisterReq) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *RegisterReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type CaptchaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CaptchaReq) Reset() {
	*x = CaptchaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptchaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptchaReq) ProtoMessage() {}

func (x *CaptchaReq) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptchaReq.ProtoReflect.Descriptor instead.
func (*CaptchaReq) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{1}
}

func (x *CaptchaReq) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *CaptchaReq) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RegisterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterResp) Reset() {
	*x = RegisterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResp) ProtoMessage() {}

func (x *RegisterResp) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResp.ProtoReflect.Descriptor instead.
func (*RegisterResp) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{2}
}

type SendCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *SendCodeReq) Reset() {
	*x = SendCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeReq) ProtoMessage() {}

func (x *SendCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeReq.ProtoReflect.Descriptor instead.
func (*SendCodeReq) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{3}
}

func (x *SendCodeReq) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SendCodeReq) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type SendCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendCodeResp) Reset() {
	*x = SendCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendCodeResp) ProtoMessage() {}

func (x *SendCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendCodeResp.ProtoReflect.Descriptor instead.
func (*SendCodeResp) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{4}
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string      `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string      `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Captcha  *CaptchaReq `protobuf:"bytes,3,opt,name=captcha,proto3" json:"captcha,omitempty"`
	Ip       string      `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{5}
}

func (x *LoginReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginReq) GetCaptcha() *CaptchaReq {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *LoginReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	MemberLevel   string `protobuf:"bytes,3,opt,name=memberLevel,proto3" json:"memberLevel,omitempty"`
	RealName      string `protobuf:"bytes,4,opt,name=realName,proto3" json:"realName,omitempty"`
	Country       string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	Avatar        string `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	PromotionCode string `protobuf:"bytes,7,opt,name=promotionCode,proto3" json:"promotionCode,omitempty"`
	Id            int64  `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	LoginCount    int32  `protobuf:"varint,9,opt,name=loginCount,proto3" json:"loginCount,omitempty"`
	SuperPartner  string `protobuf:"bytes,10,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	MemberRate    int32  `protobuf:"varint,11,opt,name=memberRate,proto3" json:"memberRate,omitempty"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{6}
}

func (x *LoginResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResp) GetMemberLevel() string {
	if x != nil {
		return x.MemberLevel
	}
	return ""
}

func (x *LoginResp) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *LoginResp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *LoginResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *LoginResp) GetPromotionCode() string {
	if x != nil {
		return x.PromotionCode
	}
	return ""
}

func (x *LoginResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginResp) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *LoginResp) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *LoginResp) GetMemberRate() int32 {
	if x != nil {
		return x.MemberRate
	}
	return 0
}

type FindMemberByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId int64 `protobuf:"varint,3,opt,name=memberId,proto3" json:"memberId,omitempty"`
}

func (x *FindMemberByIdReq) Reset() {
	*x = FindMemberByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMemberByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMemberByIdReq) ProtoMessage() {}

func (x *FindMemberByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMemberByIdReq.ProtoReflect.Descriptor instead.
func (*FindMemberByIdReq) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{7}
}

func (x *FindMemberByIdReq) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

type FindMemberByIdResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                         int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AliNo                      string  `protobuf:"bytes,2,opt,name=aliNo,proto3" json:"aliNo,omitempty"`
	QrCodeUrl                  string  `protobuf:"bytes,3,opt,name=qrCodeUrl,proto3" json:"qrCodeUrl,omitempty"`
	AppealSuccessTimes         int32   `protobuf:"varint,4,opt,name=appealSuccessTimes,proto3" json:"appealSuccessTimes,omitempty"`
	AppealTimes                int32   `protobuf:"varint,5,opt,name=appealTimes,proto3" json:"appealTimes,omitempty"`
	ApplicationTime            int64   `protobuf:"varint,6,opt,name=applicationTime,proto3" json:"applicationTime,omitempty"`
	Avatar                     string  `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Bank                       string  `protobuf:"bytes,8,opt,name=bank,proto3" json:"bank,omitempty"`
	Branch                     string  `protobuf:"bytes,9,opt,name=branch,proto3" json:"branch,omitempty"`
	CardNo                     string  `protobuf:"bytes,10,opt,name=cardNo,proto3" json:"cardNo,omitempty"`
	CertifiedBusinessApplyTime int64   `protobuf:"varint,11,opt,name=certifiedBusinessApplyTime,proto3" json:"certifiedBusinessApplyTime,omitempty"`
	CertifiedBusinessCheckTime int64   `protobuf:"varint,12,opt,name=certifiedBusinessCheckTime,proto3" json:"certifiedBusinessCheckTime,omitempty"`
	CertifiedBusinessStatus    int32   `protobuf:"varint,13,opt,name=certifiedBusinessStatus,proto3" json:"certifiedBusinessStatus,omitempty"`
	ChannelId                  int32   `protobuf:"varint,14,opt,name=channelId,proto3" json:"channelId,omitempty"`
	Email                      string  `protobuf:"bytes,15,opt,name=email,proto3" json:"email,omitempty"`
	FirstLevel                 int32   `protobuf:"varint,16,opt,name=firstLevel,proto3" json:"firstLevel,omitempty"`
	GoogleDate                 int64   `protobuf:"varint,17,opt,name=googleDate,proto3" json:"googleDate,omitempty"`
	GoogleKey                  string  `protobuf:"bytes,18,opt,name=googleKey,proto3" json:"googleKey,omitempty"`
	GoogleState                int32   `protobuf:"varint,19,opt,name=googleState,proto3" json:"googleState,omitempty"`
	IdNumber                   string  `protobuf:"bytes,20,opt,name=idNumber,proto3" json:"idNumber,omitempty"`
	InviterId                  int64   `protobuf:"varint,21,opt,name=inviterId,proto3" json:"inviterId,omitempty"`
	IsChannel                  int32   `protobuf:"varint,22,opt,name=isChannel,proto3" json:"isChannel,omitempty"`
	JyPassword                 string  `protobuf:"bytes,23,opt,name=jyPassword,proto3" json:"jyPassword,omitempty"`
	LastLoginTime              int64   `protobuf:"varint,24,opt,name=lastLoginTime,proto3" json:"lastLoginTime,omitempty"`
	City                       string  `protobuf:"bytes,25,opt,name=city,proto3" json:"city,omitempty"`
	Country                    string  `protobuf:"bytes,26,opt,name=country,proto3" json:"country,omitempty"`
	District                   string  `protobuf:"bytes,27,opt,name=district,proto3" json:"district,omitempty"`
	Province                   string  `protobuf:"bytes,28,opt,name=province,proto3" json:"province,omitempty"`
	LoginCount                 int32   `protobuf:"varint,29,opt,name=loginCount,proto3" json:"loginCount,omitempty"`
	LoginLock                  int32   `protobuf:"varint,30,opt,name=loginLock,proto3" json:"loginLock,omitempty"`
	Margin                     string  `protobuf:"bytes,31,opt,name=margin,proto3" json:"margin,omitempty"`
	MemberLevel                int32   `protobuf:"varint,32,opt,name=memberLevel,proto3" json:"memberLevel,omitempty"`
	MobilePhone                string  `protobuf:"bytes,33,opt,name=mobilePhone,proto3" json:"mobilePhone,omitempty"`
	Password                   string  `protobuf:"bytes,34,opt,name=password,proto3" json:"password,omitempty"`
	PromotionCode              string  `protobuf:"bytes,35,opt,name=promotionCode,proto3" json:"promotionCode,omitempty"`
	PublishAdvertise           int32   `protobuf:"varint,36,opt,name=publishAdvertise,proto3" json:"publishAdvertise,omitempty"`
	RealName                   string  `protobuf:"bytes,37,opt,name=realName,proto3" json:"realName,omitempty"`
	RealNameStatus             int32   `protobuf:"varint,38,opt,name=realNameStatus,proto3" json:"realNameStatus,omitempty"`
	RegistrationTime           int64   `protobuf:"varint,39,opt,name=registrationTime,proto3" json:"registrationTime,omitempty"`
	Salt                       string  `protobuf:"bytes,40,opt,name=salt,proto3" json:"salt,omitempty"`
	SecondLevel                int32   `protobuf:"varint,41,opt,name=secondLevel,proto3" json:"secondLevel,omitempty"`
	SignInAbility              int32   `protobuf:"varint,42,opt,name=signInAbility,proto3" json:"signInAbility,omitempty"`
	Status                     int32   `protobuf:"varint,43,opt,name=status,proto3" json:"status,omitempty"`
	ThirdLevel                 int32   `protobuf:"varint,44,opt,name=thirdLevel,proto3" json:"thirdLevel,omitempty"`
	Token                      string  `protobuf:"bytes,45,opt,name=token,proto3" json:"token,omitempty"`
	TokenExpireTime            int64   `protobuf:"varint,46,opt,name=tokenExpireTime,proto3" json:"tokenExpireTime,omitempty"`
	TransactionStatus          int32   `protobuf:"varint,47,opt,name=transactionStatus,proto3" json:"transactionStatus,omitempty"`
	TransactionTime            int64   `protobuf:"varint,48,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	Transactions               int32   `protobuf:"varint,49,opt,name=transactions,proto3" json:"transactions,omitempty"`
	Username                   string  `protobuf:"bytes,50,opt,name=username,proto3" json:"username,omitempty"`
	QrWeCodeUrl                string  `protobuf:"bytes,51,opt,name=qrWeCodeUrl,proto3" json:"qrWeCodeUrl,omitempty"`
	Wechat                     string  `protobuf:"bytes,52,opt,name=wechat,proto3" json:"wechat,omitempty"`
	Local                      string  `protobuf:"bytes,53,opt,name=local,proto3" json:"local,omitempty"`
	Integration                int64   `protobuf:"varint,54,opt,name=integration,proto3" json:"integration,omitempty"`
	MemberGradeId              int64   `protobuf:"varint,55,opt,name=memberGradeId,proto3" json:"memberGradeId,omitempty"`
	KycStatus                  int32   `protobuf:"varint,56,opt,name=kycStatus,proto3" json:"kycStatus,omitempty"`
	GeneralizeTotal            int64   `protobuf:"varint,57,opt,name=generalizeTotal,proto3" json:"generalizeTotal,omitempty"`
	InviterParentId            int64   `protobuf:"varint,58,opt,name=inviterParentId,proto3" json:"inviterParentId,omitempty"`
	SuperPartner               string  `protobuf:"bytes,59,opt,name=superPartner,proto3" json:"superPartner,omitempty"`
	KickFee                    float64 `protobuf:"fixed64,60,opt,name=kickFee,proto3" json:"kickFee,omitempty"`
	Power                      float64 `protobuf:"fixed64,61,opt,name=power,proto3" json:"power,omitempty"`
	TeamLevel                  int32   `protobuf:"varint,62,opt,name=teamLevel,proto3" json:"teamLevel,omitempty"`
	TeamPower                  float64 `protobuf:"fixed64,63,opt,name=teamPower,proto3" json:"teamPower,omitempty"`
	MemberLevelId              int64   `protobuf:"varint,64,opt,name=memberLevelId,proto3" json:"memberLevelId,omitempty"`
}

func (x *FindMemberByIdResp) Reset() {
	*x = FindMemberByIdResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usercenter_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindMemberByIdResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindMemberByIdResp) ProtoMessage() {}

func (x *FindMemberByIdResp) ProtoReflect() protoreflect.Message {
	mi := &file_usercenter_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindMemberByIdResp.ProtoReflect.Descriptor instead.
func (*FindMemberByIdResp) Descriptor() ([]byte, []int) {
	return file_usercenter_proto_rawDescGZIP(), []int{8}
}

func (x *FindMemberByIdResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindMemberByIdResp) GetAliNo() string {
	if x != nil {
		return x.AliNo
	}
	return ""
}

func (x *FindMemberByIdResp) GetQrCodeUrl() string {
	if x != nil {
		return x.QrCodeUrl
	}
	return ""
}

func (x *FindMemberByIdResp) GetAppealSuccessTimes() int32 {
	if x != nil {
		return x.AppealSuccessTimes
	}
	return 0
}

func (x *FindMemberByIdResp) GetAppealTimes() int32 {
	if x != nil {
		return x.AppealTimes
	}
	return 0
}

func (x *FindMemberByIdResp) GetApplicationTime() int64 {
	if x != nil {
		return x.ApplicationTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *FindMemberByIdResp) GetBank() string {
	if x != nil {
		return x.Bank
	}
	return ""
}

func (x *FindMemberByIdResp) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *FindMemberByIdResp) GetCardNo() string {
	if x != nil {
		return x.CardNo
	}
	return ""
}

func (x *FindMemberByIdResp) GetCertifiedBusinessApplyTime() int64 {
	if x != nil {
		return x.CertifiedBusinessApplyTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetCertifiedBusinessCheckTime() int64 {
	if x != nil {
		return x.CertifiedBusinessCheckTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetCertifiedBusinessStatus() int32 {
	if x != nil {
		return x.CertifiedBusinessStatus
	}
	return 0
}

func (x *FindMemberByIdResp) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *FindMemberByIdResp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *FindMemberByIdResp) GetFirstLevel() int32 {
	if x != nil {
		return x.FirstLevel
	}
	return 0
}

func (x *FindMemberByIdResp) GetGoogleDate() int64 {
	if x != nil {
		return x.GoogleDate
	}
	return 0
}

func (x *FindMemberByIdResp) GetGoogleKey() string {
	if x != nil {
		return x.GoogleKey
	}
	return ""
}

func (x *FindMemberByIdResp) GetGoogleState() int32 {
	if x != nil {
		return x.GoogleState
	}
	return 0
}

func (x *FindMemberByIdResp) GetIdNumber() string {
	if x != nil {
		return x.IdNumber
	}
	return ""
}

func (x *FindMemberByIdResp) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *FindMemberByIdResp) GetIsChannel() int32 {
	if x != nil {
		return x.IsChannel
	}
	return 0
}

func (x *FindMemberByIdResp) GetJyPassword() string {
	if x != nil {
		return x.JyPassword
	}
	return ""
}

func (x *FindMemberByIdResp) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *FindMemberByIdResp) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FindMemberByIdResp) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *FindMemberByIdResp) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *FindMemberByIdResp) GetLoginCount() int32 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *FindMemberByIdResp) GetLoginLock() int32 {
	if x != nil {
		return x.LoginLock
	}
	return 0
}

func (x *FindMemberByIdResp) GetMargin() string {
	if x != nil {
		return x.Margin
	}
	return ""
}

func (x *FindMemberByIdResp) GetMemberLevel() int32 {
	if x != nil {
		return x.MemberLevel
	}
	return 0
}

func (x *FindMemberByIdResp) GetMobilePhone() string {
	if x != nil {
		return x.MobilePhone
	}
	return ""
}

func (x *FindMemberByIdResp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FindMemberByIdResp) GetPromotionCode() string {
	if x != nil {
		return x.PromotionCode
	}
	return ""
}

func (x *FindMemberByIdResp) GetPublishAdvertise() int32 {
	if x != nil {
		return x.PublishAdvertise
	}
	return 0
}

func (x *FindMemberByIdResp) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *FindMemberByIdResp) GetRealNameStatus() int32 {
	if x != nil {
		return x.RealNameStatus
	}
	return 0
}

func (x *FindMemberByIdResp) GetRegistrationTime() int64 {
	if x != nil {
		return x.RegistrationTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

func (x *FindMemberByIdResp) GetSecondLevel() int32 {
	if x != nil {
		return x.SecondLevel
	}
	return 0
}

func (x *FindMemberByIdResp) GetSignInAbility() int32 {
	if x != nil {
		return x.SignInAbility
	}
	return 0
}

func (x *FindMemberByIdResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FindMemberByIdResp) GetThirdLevel() int32 {
	if x != nil {
		return x.ThirdLevel
	}
	return 0
}

func (x *FindMemberByIdResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FindMemberByIdResp) GetTokenExpireTime() int64 {
	if x != nil {
		return x.TokenExpireTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetTransactionStatus() int32 {
	if x != nil {
		return x.TransactionStatus
	}
	return 0
}

func (x *FindMemberByIdResp) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *FindMemberByIdResp) GetTransactions() int32 {
	if x != nil {
		return x.Transactions
	}
	return 0
}

func (x *FindMemberByIdResp) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FindMemberByIdResp) GetQrWeCodeUrl() string {
	if x != nil {
		return x.QrWeCodeUrl
	}
	return ""
}

func (x *FindMemberByIdResp) GetWechat() string {
	if x != nil {
		return x.Wechat
	}
	return ""
}

func (x *FindMemberByIdResp) GetLocal() string {
	if x != nil {
		return x.Local
	}
	return ""
}

func (x *FindMemberByIdResp) GetIntegration() int64 {
	if x != nil {
		return x.Integration
	}
	return 0
}

func (x *FindMemberByIdResp) GetMemberGradeId() int64 {
	if x != nil {
		return x.MemberGradeId
	}
	return 0
}

func (x *FindMemberByIdResp) GetKycStatus() int32 {
	if x != nil {
		return x.KycStatus
	}
	return 0
}

func (x *FindMemberByIdResp) GetGeneralizeTotal() int64 {
	if x != nil {
		return x.GeneralizeTotal
	}
	return 0
}

func (x *FindMemberByIdResp) GetInviterParentId() int64 {
	if x != nil {
		return x.InviterParentId
	}
	return 0
}

func (x *FindMemberByIdResp) GetSuperPartner() string {
	if x != nil {
		return x.SuperPartner
	}
	return ""
}

func (x *FindMemberByIdResp) GetKickFee() float64 {
	if x != nil {
		return x.KickFee
	}
	return 0
}

func (x *FindMemberByIdResp) GetPower() float64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *FindMemberByIdResp) GetTeamLevel() int32 {
	if x != nil {
		return x.TeamLevel
	}
	return 0
}

func (x *FindMemberByIdResp) GetTeamPower() float64 {
	if x != nil {
		return x.TeamPower
	}
	return 0
}

func (x *FindMemberByIdResp) GetMemberLevelId() int64 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

var File_usercenter_proto protoreflect.FileDescriptor

var file_usercenter_proto_rawDesc = []byte{
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x85, 0x02, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28,
	0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x52,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x3a,
	0x0a, 0x0a, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0e, 0x0a, 0x0c, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x3d, 0x0a, 0x0b, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x0e, 0x0a, 0x0c, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x7c, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x52, 0x65, 0x71, 0x52, 0x07,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0xc7, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x2f, 0x0a, 0x11, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc6, 0x10, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x4e, 0x6f, 0x12,
	0x1c, 0x0a, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a,
	0x12, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x70, 0x70, 0x65, 0x61,
	0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x61, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x6f, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x63, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6a,
	0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6a, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x61, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x41,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x71,
	0x72, 0x57, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x71, 0x72, 0x57, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x38, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6b, 0x79, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x70, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x69, 0x63,
	0x6b, 0x46, 0x65, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x69, 0x63, 0x6b,
	0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61,
	0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x65,
	0x61, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x61, 0x6d, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x65, 0x61, 0x6d,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x32, 0xd5, 0x01, 0x0a, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x42, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x5f, 0x69, 0x64, 0x12, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x70, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usercenter_proto_rawDescOnce sync.Once
	file_usercenter_proto_rawDescData = file_usercenter_proto_rawDesc
)

func file_usercenter_proto_rawDescGZIP() []byte {
	file_usercenter_proto_rawDescOnce.Do(func() {
		file_usercenter_proto_rawDescData = protoimpl.X.CompressGZIP(file_usercenter_proto_rawDescData)
	})
	return file_usercenter_proto_rawDescData
}

var file_usercenter_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_usercenter_proto_goTypes = []interface{}{
	(*RegisterReq)(nil),        // 0: pb.RegisterReq
	(*CaptchaReq)(nil),         // 1: pb.CaptchaReq
	(*RegisterResp)(nil),       // 2: pb.RegisterResp
	(*SendCodeReq)(nil),        // 3: pb.SendCodeReq
	(*SendCodeResp)(nil),       // 4: pb.SendCodeResp
	(*LoginReq)(nil),           // 5: pb.LoginReq
	(*LoginResp)(nil),          // 6: pb.LoginResp
	(*FindMemberByIdReq)(nil),  // 7: pb.FindMemberByIdReq
	(*FindMemberByIdResp)(nil), // 8: pb.FindMemberByIdResp
}
var file_usercenter_proto_depIdxs = []int32{
	1, // 0: pb.RegisterReq.captcha:type_name -> pb.CaptchaReq
	1, // 1: pb.LoginReq.captcha:type_name -> pb.CaptchaReq
	3, // 2: pb.usercenter.send_code:input_type -> pb.SendCodeReq
	0, // 3: pb.usercenter.register:input_type -> pb.RegisterReq
	5, // 4: pb.usercenter.login:input_type -> pb.LoginReq
	7, // 5: pb.usercenter.find_member_by_id:input_type -> pb.FindMemberByIdReq
	4, // 6: pb.usercenter.send_code:output_type -> pb.SendCodeResp
	2, // 7: pb.usercenter.register:output_type -> pb.RegisterResp
	6, // 8: pb.usercenter.login:output_type -> pb.LoginResp
	8, // 9: pb.usercenter.find_member_by_id:output_type -> pb.FindMemberByIdResp
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_usercenter_proto_init() }
func file_usercenter_proto_init() {
	if File_usercenter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_usercenter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptchaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMemberByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_usercenter_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindMemberByIdResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usercenter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usercenter_proto_goTypes,
		DependencyIndexes: file_usercenter_proto_depIdxs,
		MessageInfos:      file_usercenter_proto_msgTypes,
	}.Build()
	File_usercenter_proto = out.File
	file_usercenter_proto_rawDesc = nil
	file_usercenter_proto_goTypes = nil
	file_usercenter_proto_depIdxs = nil
}
